{"version":3,"sources":["components/Search.js","components/MovieItem.js","components/NotFound.js","components/SearchResults.js","components/MovieDetail.js","App.js","serviceWorker.js","index.js"],"names":["Search","props","TextField","id","label","variant","className","onChange","handleInput","onKeyPress","searchEvent","Button","color","startIcon","onClick","searchButtonClick","MovieItem","Listitem","openDetail","imdbID","Title","Year","src","Poster","alt","NotFound","SearchResults","results","map","item","key","MovieDetail","closeDetail","Genre","Plot","imdbRating","App","useState","s","selected","state","setState","apiUrl","e","target","value","prevState","console","log","axios","then","data","detail","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.9e1be7f5.chunk.js","sourcesContent":["import React from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport { TextField } from '@material-ui/core';\r\n\r\n\r\nfunction Search(props) {\r\n\r\n    \r\n    return (\r\n        <div>\r\n            <TextField id=\"outlined-basic\" label=\"Search for a movie...\" variant=\"outlined\" \r\n            className=\"searchBar\" \r\n            onChange={props.handleInput}\r\n            onKeyPress={props.searchEvent}/>\r\n\r\n            <Button variant=\"contained\" color=\"primary\" startIcon={<SearchIcon/>} onClick={()=>props.searchButtonClick()}> Search</Button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Search\r\n","import React from 'react'\r\n// import Card from '@material-ui/core/Card';\r\n// import CardHeader from '@material-ui/core/CardHeader';\r\n// import CardMedia from '@material-ui/core/CardMedia';\r\n// import CardContent from '@material-ui/core/CardContent';\r\n\r\nfunction MovieItem({Listitem,openDetail}) {\r\n    return (\r\n        <div className=\"Movie-card\" onClick={()=>openDetail(Listitem.imdbID)}>\r\n            <h4>{Listitem.Title}</h4>\r\n            <p>Year: {Listitem.Year}</p>\r\n            <img src={Listitem.Poster} className=\"Movie-card-image\" alt={Listitem.Title}></img>\r\n        </div>\r\n        \r\n\r\n    )\r\n}\r\n\r\nexport default MovieItem\r\n","import React from 'react'\r\n\r\nfunction NotFound() {\r\n    return (\r\n        <div>\r\n            <h4 className=\"Not-found-h4\">Movie Not Found ...</h4>\r\n            <p>Try Another one</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default NotFound\r\n","import React from 'react';\r\nimport MovieItem from './MovieItem';\r\nimport NotFound from './NotFound';\r\n\r\nfunction SearchResults({results,openDetail}) {\r\n    return (\r\n        <div className=\"SearchResults-container\">\r\n            {\r\n                (typeof results)!==\"undefined\"?results.map(item=>{\r\n                    return(<MovieItem key={item.imdbID} Listitem={item} openDetail={openDetail} />)\r\n                }):<NotFound/>\r\n            }\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SearchResults\r\n","import React from 'react'\r\nimport { Button } from '@material-ui/core'\r\n\r\nfunction MovieDetail({item,closeDetail}) {\r\n    return (\r\n        <div className=\"Movie-Detail\">\r\n            <h4>{item.Title} - {item.Year}</h4>\r\n            <h5>Genre: {item.Genre}</h5>\r\n            <img src={item.Poster} alt={item.Title} />\r\n            <p><strong>Plot: </strong>{item.Plot}</p>\r\n            <p><strong>Rating: {item.imdbRating}</strong></p>\r\n            <Button variant=\"contained\" color=\"secondary\" onClick={()=>closeDetail()}>Close</Button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MovieDetail\r\n","import React,{ useState }  from 'react';\nimport Search from './components/Search';\nimport SearchResults from './components/SearchResults';\nimport MovieDetail from './components/MovieDetail';\nimport axios from 'axios';\n\nfunction App() {\n  const [state,setState] = useState({\n    s:\"\",\n    results:[],\n    selected:{}\n  });\n\n  const apiUrl = \"http://www.omdbapi.com/?apikey=921b06eb\";\n  const handleInput = (e)=>{\n    let s = e.target.value;\n    setState(prevState=>{\n      return {...prevState,s:s}\n    });\n    \n    console.log(state.s);\n\n  }\n  const searchEvent = (e)=>{\n    if(e.key ===\"Enter\"){\n      axios(apiUrl+\"&s=\"+state.s).then(({data})=>{\n        let results = data.Search;\n        console.log(results);\n        setState(prevState=>{\n          return {...prevState,results:results}\n        })\n        \n      })\n      \n    }\n  }\n  const searchButtonClick = ()=>{\n      axios(apiUrl+\"&s=\"+state.s).then(({data})=>{\n        let results = data.Search;\n        console.log(results);\n        setState(prevState=>{\n          return {...prevState,results:results}\n        })\n        \n      })\n      \n  }\n  const openDetail = id=>{\n    axios(apiUrl+\"&i=\"+id).then(({data})=>{\n      let detail = data;\n      console.log(detail);\n\n      setState(prevState=>{\n        return {...prevState,selected:detail}\n      });\n      //console.log(state.selected);\n    })\n  }\n\n  const closeDetail = ()=>{\n    setState(prevState=>{\n      return {...prevState,selected:{}}\n    });\n    \n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <div className=\"search-container\">\n            <h2>Movie Search</h2>\n            <Search handleInput={handleInput} searchEvent={searchEvent} searchButtonClick={searchButtonClick}></Search>\n        </div>\n        <div className=\"body-container\">\n          <div className=\"SearchResults-container-container\">\n              <SearchResults results={state.results} openDetail={openDetail}></SearchResults>\n          </div>\n            <div className=\"MovieDetail-container\">\n              {(typeof (state.selected.Title)!=\"undefined\")?<MovieDetail item={state.selected} closeDetail={closeDetail}/>:false}\n            </div>\n        </div>\n        \n        \n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}